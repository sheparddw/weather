{"version":3,"sources":["helpers/api.js","assets/cloud.svg","components/Settings/Settings.js","components/App.js","reportWebVitals.js","index.js"],"names":["Api","url","headers","fetch","method","body","encodedBody","JSON","stringify","Settings","props","state","coordinates","this","setState","saveCoordinates","passedState","handleSettingsChange","window","localStorage","setItem","className","to","onClick","handleChange","id","value","onChange","e","target","Component","App","getItem","overviewData","forecastData","getForecast","callApi","then","data","properties","forecast","stateItemName","get","ok","json","jsonData","childState","overview","city","relativeLocation","weather","periods","report","name","detailedForecast","image","icon","cloud","src","alt","href","title","basename","path","bind","app","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c39de5cd.chunk.js","sourcesContent":["// Generic helper/wrapper class for dealing with APIs.\n// This makes it easier to add something like caching later.\nexport default class Api {\n\t// GET request.\n\tget( url, headers = {} ) {\n\t\t// Make API call.\n\t\treturn fetch( url, {\n\t\t\tmethod: 'GET',\n\t\t\theaders,\n\t\t} );\n\t}\n\n\t// POST request.\n\tpost( url, headers, body, convertToFormData = false ) {\n\t\tlet encodedBody = JSON.stringify( body );\n\t\treturn fetch( url, {\n\t\t\tmethod: 'POST',\n\t\t\theaders,\n\t\t\tbody: encodedBody,\n\t\t} );\n\t}\n\n\t// DELETE request.\n\tdelete( url, headers, body ) {\n\t\tconst encodedBody = JSON.stringify( body );\n\t\treturn fetch( url, {\n\t\t\tmethod: 'DELETE',\n\t\t\theaders,\n\t\t\tbody: encodedBody,\n\t\t} );\n\t}\n\n\t// PUT request.\n\tput( url, headers, body, convertToFormData = false ) {\n\t\tlet encodedBody = JSON.stringify( body );\n\n\t\treturn fetch( url, {\n\t\t\tmethod: 'PUT',\n\t\t\theaders,\n\t\t\tbody: encodedBody,\n\t\t} );\n\t}\n}\n","export default __webpack_public_path__ + \"static/media/cloud.06df75af.svg\";","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport './Settings.css';\n\nclass Settings extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcoordinates: this.props.coordinates,\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t}\n\n\thandleChange(coordinates) {\n\t\tthis.setState({coordinates}, () => {\n\t\t\tthis.saveCoordinates();\n\n\t\t\tconst passedState = {\n\t\t\t\tcoordinates,\n\t\t\t}\n\t\t\tthis.props.handleSettingsChange(passedState);\n\t\t})\n\t}\n\n\t// Saves to localStorage so persists beyond the session.\n\tsaveCoordinates() {\n\t\twindow.localStorage.setItem('coordinates', this.state.coordinates);\n\t}\n\n\trender() {\n\t\tconst { coordinates } = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"Settings\">\n\t\t\t\t<Link to=\"/\">{'<-'}</Link>\n\t\t\t\t<h1>Settings</h1>\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst coordinates = '45.5051,-122.6750';\n\t\t\t\t\t\t\tthis.setState({ coordinates }, () => {\n\t\t\t\t\t\t\t\tthis.handleChange(coordinates);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}}\n\t\t\t\t\t>Use Default</button>\n\n\t\t\t\t\t<h2>Coordinates:</h2>\n\t\t\t\t\tTodo: add a map here.\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tid=\"coordinates\"\n\t\t\t\t\t\tvalue={coordinates}\n\t\t\t\t\t\tonChange={\n\t\t\t\t\t\t\t(e) => {\n\t\t\t\t\t\t\t\tconst coordinates = e.target.value;\n\t\t\t\t\t\t\t\tthis.setState({ coordinates }, () => {\n\t\t\t\t\t\t\t\t\tthis.handleChange(coordinates);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Settings;\n","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Api from '../helpers/api';\nimport cloud from '../assets/cloud.svg';\nimport Settings from './Settings/Settings';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// Use localStorage data if available. Otherwise default to Portland.\n\t\tconst coordinates = window.localStorage.getItem('coordinates') || '45.5051,-122.6750';\n\n\t\tthis.state = {\n\t\t\tcoordinates,\n\t\t\toverviewData: false,\n\t\t\tforecastData: false,\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getForecast();\n\t}\n\n\tcomponentDidUpdate() {\n\t}\n\n\tgetForecast() {\n\t\t// Use the user's coordinates from the Settings page if available.\n\t\tconst { coordinates } = this.state;\n\t\t// Gets the overview api data then runs another call for the forecast.\n\t\tthis.callApi(`https://api.weather.gov/points/${coordinates}`, 'overviewData').then(\n\t\t\tdata => this.callApi(this.state.overviewData?.properties?.forecast, 'forecastData')\n\t\t);\n\t}\n\n\t// Get weather data via the openweather API.\n\tcallApi( url, stateItemName ) {\n\t\tconst api = new Api();\n\t\tconst headers = [];\n\t\treturn (\n\t\t\tapi\n\t\t\t\t.get( url, headers )\n\t\t\t\t.then( ( data ) => {\n\t\t\t\t\t// If status is 200-299.\n\t\t\t\t\tif ( data.ok ) {\n\t\t\t\t\t\treturn data.json().then( ( jsonData ) => \n\t\t\t\t\t\t\tthis.setState({ [stateItemName]: jsonData })\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t);\n\t}\n\n\t// Whenever settings change, update the API data.\n\thandleSettingsChange( childState ) {\n\t\tconst coordinates = childState?.coordinates;\n\t\t// Make sure the value is valid.\n\t\tif ( coordinates ) {\n\t\t\treturn this.setState({ coordinates }, () => {\n\t\t\t\tthis.getForecast();\n\t\t\t})\n\t\t}\n\t}\n\n\t// The forecast UI.\n\tapp() {\n\t\tconst overview = this.state.overviewData;\n\t\tconst city = overview?.properties?.relativeLocation?.properties?.city;\n\t\tconst weather = this.state.forecastData?.properties?.periods?.[0];\n\t\t// Only shows if weather is available anyway.\n\t\tconst report = `${weather?.name}: ${weather?.detailedForecast}`;\n\t\tconst image = weather?.icon || cloud;\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Link to=\"/settings\">Settings</Link>\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={image} className=\"icon\" alt=\"logo\" />\n\t\t\t\t\t\n\t\t\t\t</header>\n\t\t\t\t{ city && (\n\t\t\t\t\t<div className=\"city\">\n\t\t\t\t\t\t<h2>{city}</h2>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{ weather && (\n\t\t\t\t\t<div className=\"report\">\n\t\t\t\t\t\t{ report }\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{ ! weather?.icon && (\n\t\t\t\t\t<div className=\"attributions\">Icons made by <a href=\"https://www.flaticon.com/authors/smashicons\" title=\"Smashicons\">Smashicons</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\tlet basename = '/weather';\n\n\t\treturn (\n\t\t\t<Router basename={ basename }>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path=\"/settings\">\n\t\t\t\t\t\t<Settings\n\t\t\t\t\t\t\thandleSettingsChange={ this.handleSettingsChange.bind(this) }\n\t\t\t\t\t\t\tcoordinates={this.state.coordinates}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t{ this.app() }\n\t\t\t\t\t</Route>\n        \t\t</Switch>\n\t\t\t</Router>\n\t\t)\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}